"==================================================================
"================ Samuel Thewessen vimrc-file =====================
"==================================================================

"=================================
" Start Vundle vim configuration
"=================================
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ

filetype off		"required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" =================================
"             Plugins
" =================================
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tpope/vim-vinegar'
" Plugin 'scrooloose/nerdtree'
" Plugin 'ivalkeen/nerdtree-execute'
Plugin 'tpope/vim-fugitive'
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
" Plugin 'jelera/vim-javascript-syntax'
Plugin 'Quramy/tsuquyomi'
" Plugin 'Quramy/vim-js-pretty-template'
Plugin 'Valloric/YouCompleteMe'
" Plugin 'Townk/vim-autoclose'
" Plugin 'ludovicchabant/vim-gutentags'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'vim-latex/vim-latex'

" =================================
"     End Vundle Configuration
" =================================
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Put your non-Plugin stuff after this line

set nocompatible    " Unlock vim functionality (not Vi)
set encoding=utf8

" Another default vim plugin
" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"=================================
"           Statusline
"=================================

" Toggle bg-colors on InsertMode
au InsertEnter * hi User3 ctermbg=1 guibg=#d7afff
au InsertLeave * hi User3 ctermbg=22 guibg=#8fbfdc

" Toggle bg-colors on CommandMod
au CmdlineEnter * hi User3 ctermbg=220 guibg=#d7afff
au CmdlineLeave * hi User3 ctermbg=22 guibg=#8fbfdc

" default: set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" Setup a dictionary for all modes text
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Nor OP',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

" Statusline attributes
set statusline=
set statusline+=%3*\ %1n\                                  " Buffer number
set statusline+=%2*\ %Y\                                   " FileType
set statusline+=%1*\ %<(%0{&ff})                           " FileFormat (dos/unix..)
set statusline+=%1*\ %<%0{''.(&fenc!=''?&fenc:&enc).''}\   " Encoding
set statusline+=%0*\ %<%10f%m%r%h%w\                       " File path, modified, readonly, helpfile, preview
set statusline+=%=                                         " Right Side
set statusline+=%1*\ %<col:\ %02v\                         " Colomn number
set statusline+=%2*\ %<ln:\ %02l/%L\ (%3p%%)\              " Line number / total lines, percentage of document
set statusline+=%3*\ %{toupper(g:currentmode[mode()])}\    " The current mode 

"=================================
"         Vim Configurations
"=================================

" Basic
set autoread            " If file changed outside vim, while inside vim
set backspace=indent,eol,start
set complete-=i
set nrformats-=octal
set formatoptions+=j    " Delete comment character when joining commented lines
set tabpagemax=50
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=16
endif

" Continue where you left off by using viminfo-file
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

" Colors
syntax enable       " syntax highlighting
set hlsearch        " highlight searched words
set incsearch		" search 'looped'
colorscheme sthew   " Own colorscheme adapted from monokai-colors

" Speed thing up
set nolazyredraw    " Don't redraw when using macro's
set ttyfast         " Improves smoothness of redrawing
set path+=**        " Enable recursive filesearch

" Extra info
set laststatus=2    " Always show statusline
set noshowmode      " Not showing mode in message bar
set wildmenu        " Display all matching files when completing
set showcmd         " Pending commands in right corner

" Show linenumbers
set ruler
set number relativenumber   " Relative numberline (only the current line has absolute linenumber
set cursorline              " Highlight line of the cursor

" Folds common files
set foldmethod=syntax     " Automatic folding depending on syntax
set foldlevelstart=99     " Start with all folds open

" Save folds of some files
" (mkview auto-sets closeallfolds and foldmethod=manual ?!?)
au BufWinLeave vimrc mkview
au BufWinLeave *.tex mkview
au BufWinLeave *.conf mkview

" Load saved folds of some files
au BufWinEnter vimrc silent loadview
au BufWinEnter *.tex silent loadview
au BufWinEnter *.conf silent loadview

" Invisible chars
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=↪

" Set Proper Tabs
set autoindent
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

" Lines and scrolling
if !&scrolloff          " Always last three lines visible when scroling to EOF
  set scrolloff=3
endif
if !&sidescrolloff      " Always last five columns visible when scroling to EOL
  set sidescrolloff=5
endif
set nowrap          " No linebreaks when window-width is too small
set wrapmargin=0    " No linebreaks in Insert mode
set textwidth=0     " as nowrap

" Active Window more visible by changing ruler
au WinEnter * set number relativenumber foldcolumn=0
au WinLeave * set nonumber norelativenumber foldcolumn=4


" Different statusline on non-active window (doesn't work!)
" au WinEnter * set statusline=%3*\ %n\ %2*\ %Y\ %1*\ (%{&ff})%1*\ %{''.(&fenc!=''?&fenc:&enc).''}\ %0*\ %<%f%m%r%h%w\ %=%1*\ col:\ %02v\ %2*\ ln:\ %02l/%L\ (%3p%%)\ %3*\ %{toupper(g:currentmode[mode()])}\ 
" au WinLeave * set statusline=%4*\ %n\ %0*\ %<%f%m%r%h%w\ %=%1*\ col:\ %02v\ %2*\ ln:\ %02l/%L\ (%3p%%)\ 

" =================================
"       Plugin Configurations
" =================================

" NERDTree configurations
let NERDTreeWinSize=40
let NERDTreeQuitOnOpen=1

" Latex-Suite configurations
let g:tex_flavor='latex'    " Enable latex-suite on empty tex-files
let g:Tex_AdvancedMath = 1  " Enable <alt>-key macro's for latex-suite
" :TTarget pdf              " Set standard output of compiler to PDF (iso DVI)

" YMC (YouCompleteMe) configurations
" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_enable_diagnostic_highlighting = 0
" Don't show YCM's preview window
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 1

"=================================
"		 Usefull mappings
"=================================

" Overlooked keybindings?
" C-P
" -

" Different leader key
let mapleader=","

" Reload this config file
nno <leader>R :source ~/.vim/vimrc<CR> :echo "Vimrc configuration reloaded..."<CR>

" Save file
nmap <leader>, :w<CR>

" Save&Close file
nmap <leader>w :wq<CR>

" Save file
nmap <leader>, :w<CR>

" Quit!
nmap <leader>q :q!<CR>

" Switch between current and last buffer
nmap <Leader>. <C-^>

" Buffers
nmap <Leader>b :b 

" Make C-U act like u
ino <C-U> <C-G>u<C-U>

" Git commands (vim-fugitive)
nno <leader>gs :Gstatus<CR>
nno <leader>ga :Gwrite<CR>
nno <leader>gr :Gread<CR>
nno <leader>gc :Gcommit<CR>
nno <leader>gb :Gblame!<CR>
nno <leader>gd :Gremove<CR>
nno <leader>gm :Gmove<CR>

" Window movement and tiling
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-H> <C-W>h
nmap <C-L> <C-W>l

" Edit vimrc, gitconfig, tmux.conf, bashrc and bash_alliases
" Edit ~/.vim/vimrc
map <leader>ev :e! ~/.vim/vimrc<CR>
" Edit ~/.vim/colors/sthew.vim
map <leader>ec :e! ~/.vim/colors/sthew.vim<CR>
" Edit ~/.gitconfig
map <leader>eg :e! ~/.gitconfig<CR>
" Edit ~/.tmux.conf
map <leader>et :e! ~/.tmux.conf<CR>
" Edit ~/.bashrc
map <leader>eb :e! ~/.bashrc<CR>
" Edit ~/.bash_aliasses
map <leader>ea :e! ~/.bash_aliases<CR>

" Press Space to turn off highlighted search
" and clear any message already displayed.
nno <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Remove extra whitespace
" nmap <leader><space> :%s/\s\+$<cr>
" nmap <leader><space><space> :%s/\n\{2,}/\r\r/g<cr>

" Check syntax highlighting group under the cursor
nmap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"Een random number in vim met f2
"":map <f2> :py import vim, random; vim.current.line += str(random.randint(0, 9)) <CR>

" Snippits (read from .vim/skeletons) like html tags etc.
nno <leader>hh :-1read $HOME/.vim/skeletons/header_comment.txt<CR>:+0,+2Commentary<CR>jA<BS>
nno <leader>tt :-1read $HOME/.vim/skeletons/title_comment.txt<CR>:+0,+2Commentary<CR>jfSc2w
nno <leader>html :-1read $HOME/.vim/skeletons/skeleton.html<CR>4jwf<i

"==================================================================
