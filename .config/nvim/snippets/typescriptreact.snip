# Note: Hard-tabs for JavaScript snippets is important
# because of indention
snippet TODO
alias td TD TODO
options head
  // TODO: ${0:TARGET}

snippet JSX-TODO
alias rtd rto RTODO
options head
  {/* TODO: ${0:TARGET} */}

snippet console.log
alias cl log con
	console.log(${1})${0}

snippet console.error
alias ce error
	console.error(${0:TARGET})

snippet console.warn
alias cw warn
options head
	console.warn(${0:TARGET})

snippet if
options head
	if (${1:#:condition}) {
		${2:#:do_stuff}
	};
	${0:TARGET}

snippet if-else
alias ife
options head
	if (${1:#:condition}) {
		${2:#:do_stuff}
	} else {
		${3:#:do_more_stuff}
	};
	${0:TARGET}

snippet if-else-if
alias ifei
options head
	if (${1:#:condition}) {
		${2:#:do_stuff}
	} else if (${3:#:condition}) {
		${4:#:do_more_stuff}
	};
	${0:TARGET}

snippet try-catch
alias tc
options head
	try {
		${1:#:do_stuff}
	} catch (${2:err}) {
		${3:#:handle_error}
	};
	${0:TARGET}

snippet try-finally
alias tf
options head
	try {
		${1:#:do_stuff}
	} finally {
		${2:#:do_more_stuff}
	};
	${0:TARGET}
	
snippet try-catch-finally
alias tcf
options head
	try {
		${1:#:do_stuff}
	} catch (${2:err}) {
		${3:#:handle_error}
	} finally {
		${4:#:do_more_stuff}
	};
	${0:TARGET}

snippet for
options head
  for (let ${1:i} = 0; $1 < ${2:#:Things}.length; $1 += ${3:1}) {
    ${0:TARGET}
  }

snippet for-in
alias forin
options head
	for (const ${1:key} in ${2:obj}) {
		if ($2.hasOwnProperty($1)) {
			${0:TARGET}
		};
	};

snippet for-of
alias forof
options head
	for (const ${1:value} of ${2:#:iterable}) {
		${0:TARGET}
	};

snippet arrow-function
alias f
options word
	(${1:argument}) => {
		${2:#:do_stuff}
	}${0:TARGET}

snippet full-arrow-function
alias fa
options head
	const ${1:#:functionName} = ${2:#:argument} => {
		${3:#:do_stuff}
	};
	${0:TARGET}

snippet small-arrow-function
alias fs
options word
	(${1:#:argument}) => ${0:#:TARGET}

snippet promises
alias .get .g
options word
  .get(${1:url})
  .then(resp => ${2:resp})
  .catch(err => ${3:err})
  ${0:target}
# Components
# ========================================
snippet functional-component
alias cf
options head
	const ${1:MyComponent} = ${2:props} => {
		${3}

		return (
			<>
				${4:#:JSX}
			</>
		);
	};
	${0:TARGET}

snippet styled-component
alias cs
options head
	const ${1:MyStyledComponent} = styled.${2:div}((${3:props}) => \`
		${4:#:styles}
	\`;
	${0:TARGET}

# Hooks
# ========================================
snippet hook-state
alias hs
options head
	const [${1:state}, ${2:setState}] = useState<${3:any}>(${4:false});${0:TARGET}

snippet hook-context
alias hc
options head
	const {${1:prop}} = useContext(${2:context});${0:TARGET}

snippet hook-effect
alias he
options head
	useEffect(() => {
		${1:#:do_stuff}
	}, [${2:#:dependencies}]);${0:TARGET}

snippet hook-memo
alias hm
options head
	useMemo(() => {
		${1:#:do_stuff}
	}, [${2:#:dependencies]}]);${0:TARGET}

snippet hook-dispatch
alias hd
options head
	const dispatch = useDispatch();

snippet hook-selector
alias hr
options head
	const {${1:#:state}} = useSelector(state => state);

# Files
# ========================================
snippet react-functional-component
alias rfc
options head
	import * as React from 'react';
  import { FC } from 'react';

  interface Props {
    
  }

	const ${1:`expand('%:t:r')`}: FC<Props> = (${2:props}) => {
		${3:#:constants}

		return (
			${0:TARGET}
		);
	};

	export default $1;
